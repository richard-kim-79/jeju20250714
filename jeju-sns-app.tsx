import React, { useState, useEffect } from 'react';
import { Search, Plus, Image, Link, MapPin, Briefcase, Home, Calendar, FileText, Bell, Settings, Key, User, LogOut, Heart, MessageCircle, Repeat2, Share, MoreHorizontal, X } from 'lucide-react';

const JejuSNS = () => {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [newPost, setNewPost] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [showApiModal, setShowApiModal] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [showImageUpload, setShowImageUpload] = useState(false);
  const [selectedImage, setSelectedImage] = useState(null);

  // Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÏùò
  const categories = [
    { id: 'all', name: 'Ï†ÑÏ≤¥', icon: 'üå¥' },
    { id: 'jobs', name: 'Íµ¨Ïù∏Íµ¨ÏßÅ', icon: 'üíº' },
    { id: 'realestate', name: 'Î∂ÄÎèôÏÇ∞', icon: 'üè†' },
    { id: 'events', name: 'ÏßÄÏó≠ÌñâÏÇ¨', icon: 'üéâ' },
    { id: 'policy', name: 'Ï†ïÏ±ÖÏßÄÏõê', icon: 'üìã' },
    { id: 'news', name: 'ÏßÄÏó≠Îâ¥Ïä§', icon: 'üì∞' }
  ];

  // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
  const samplePosts = [
    {
      id: 1,
      author: 'Ï†úÏ£ºÏãúÎØº',
      username: '@jejucitizen',
      avatar: 'üë§',
      content: 'Ï†úÏ£ºÏãúÏ≤≠ÏóêÏÑú Ï≤≠ÎÖÑ Ï∞ΩÏóÖ ÏßÄÏõêÍ∏à Ïã†Ï≤≠ Î∞õÍ≥† ÏûàÏñ¥Ïöî! ÏµúÎåÄ 500ÎßåÏõêÍπåÏßÄ ÏßÄÏõêÌï©ÎãàÎã§. ÏûêÏÑ∏Ìïú ÎÇ¥Ïö©ÏùÄ https://jeju.go.kr/startup ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.',
      category: 'policy',
      timestamp: '2ÏãúÍ∞Ñ Ï†Ñ',
      likes: 24,
      comments: 8,
      retweets: 12,
      hasLink: true,
      image: null
    },
    {
      id: 2,
      author: 'Ï†úÏ£ºÎ∂ÄÎèôÏÇ∞',
      username: '@jejurealty',
      avatar: 'üè†',
      content: 'ÏÑúÍ∑ÄÌè¨Ïãú Ï§ëÎ¨∏Îèô Ìà¨Î£∏ Ï†ÑÏÑ∏ Îß§Î¨º ÎÇòÏôîÏäµÎãàÎã§. Î≥¥Ï¶ùÍ∏à 8Ï≤úÎßåÏõê, Î∞îÎã§ Ï†ÑÎßù Ï¢ãÏùÄ Í≥≥Ïù¥ÏóêÏöî. Ïó∞ÎùΩÏ£ºÏÑ∏Ïöî!',
      category: 'realestate',
      timestamp: '4ÏãúÍ∞Ñ Ï†Ñ',
      likes: 15,
      comments: 23,
      retweets: 6,
      hasLink: false,
      image: null
    },
    {
      id: 3,
      author: 'Ï†úÏ£ºÏó¨ÌñâÏÇ¨',
      username: '@jejutour',
      avatar: '‚úàÔ∏è',
      content: 'Ïù¥Î≤à Ï£ºÎßê ÌïúÎùºÏÇ∞ Îì±Î∞ò Í∞ÄÏù¥Îìú Íµ¨Ìï©ÎãàÎã§. Í≤ΩÎ†• 3ÎÖÑ Ïù¥ÏÉÅ, ÏïàÏ†ÑÍµêÏú° Ïù¥ÏàòÏûê Ïö∞ÎåÄ. ÏùºÎãπ 15ÎßåÏõêÏûÖÎãàÎã§.',
      category: 'jobs',
      timestamp: '6ÏãúÍ∞Ñ Ï†Ñ',
      likes: 31,
      comments: 17,
      retweets: 9,
      hasLink: false,
      image: null
    },
    {
      id: 4,
      author: 'Ï†úÏ£ºÎ¨∏ÌôîÏõê',
      username: '@jejuculture',
      avatar: 'üé≠',
      content: 'Ï†úÏ£º Ï†ÑÌÜµ Ìï¥ÎÖÄ Î¨∏Ìôî Ï≤¥Ìóò ÌñâÏÇ¨Í∞Ä Îã§Ïùå Ï£º ÌÜ†ÏöîÏùº ÏÑ±ÏÇ∞ÏùºÏ∂úÎ¥âÏóêÏÑú Ïó¥Î¶ΩÎãàÎã§. Ï∞∏Í∞ÄÎπÑ Î¨¥Î£å, ÏÇ¨Ï†Ñ Ïã†Ï≤≠ ÌïÑÏàò!',
      category: 'events',
      timestamp: '8ÏãúÍ∞Ñ Ï†Ñ',
      likes: 67,
      comments: 34,
      retweets: 28,
      hasLink: false,
      image: null
    }
  ];

  useEffect(() => {
    setPosts(samplePosts);
  }, []);

  // Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨
  const handleLogin = (provider) => {
    setUser({
      name: 'Ï†úÏ£ºÎèÑÎØº',
      username: '@jejuuser',
      avatar: 'üë§',
      email: 'user@jeju.com'
    });
    setShowLoginModal(false);
  };

  // Î°úÍ∑∏ÏïÑÏõÉ
  const handleLogout = () => {
    setUser(null);
    setApiKey('');
  };

  // API ÌÇ§ ÏÉùÏÑ±
  const generateApiKey = () => {
    const key = 'jeju_' + Math.random().toString(36).substr(2, 16);
    setApiKey(key);
  };

  // Í≤åÏãúÍ∏Ä ÏûëÏÑ±
  const handlePost = () => {
    if (!newPost.trim()) return;

    const hasLink = newPost.includes('http://') || newPost.includes('https://');
    const post = {
      id: posts.length + 1,
      author: user.name,
      username: user.username,
      avatar: user.avatar,
      content: newPost,
      category: selectedCategory === 'all' ? 'news' : selectedCategory,
      timestamp: 'Î∞©Í∏à Ï†Ñ',
      likes: 0,
      comments: 0,
      retweets: 0,
      hasLink,
      image: selectedImage
    };

    setPosts([post, ...posts]);
    setNewPost('');
    setSelectedImage(null);
    setShowImageUpload(false);
  };

  // Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setSelectedImage(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };

  // ÎßÅÌÅ¨ ÌÅ¥Î¶≠ Ï≤òÎ¶¨
  const handleLinkClick = (content) => {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const urls = content.match(urlRegex);
    if (urls) {
      window.open(urls[0], '_blank');
    }
  };

  // Í≤ÄÏÉâ ÌïÑÌÑ∞ÎßÅ
  const filteredPosts = posts.filter(post => {
    const matchesCategory = selectedCategory === 'all' || post.category === selectedCategory;
    const matchesSearch = searchQuery === '' || 
      post.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
      post.author.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  // Í≤åÏãúÍ∏Ä Î†åÎçîÎßÅ
  const renderPost = (post) => {
    return (
      <div key={post.id} className="bg-white border-b border-gray-200 p-3 hover:bg-gray-50 transition-colors">
        <div className="flex space-x-2">
          <div className="text-lg">{post.avatar}</div>
          <div className="flex-1 min-w-0">
            <div className="flex items-center space-x-1 mb-1">
              <span className="text-sm font-bold text-gray-900">{post.author}</span>
              <span className="text-xs text-gray-500">{post.username}</span>
              <span className="text-xs text-gray-500">¬∑</span>
              <span className="text-xs text-gray-500">{post.timestamp}</span>
              <span className="text-xs px-1.5 py-0.5 bg-blue-100 text-blue-800 rounded-full">
                {categories.find(cat => cat.id === post.category)?.icon}
                {categories.find(cat => cat.id === post.category)?.name}
              </span>
            </div>
            
            <div className="text-sm text-gray-900 mb-2">
              {post.hasLink ? (
                <span 
                  className="cursor-pointer hover:text-blue-600"
                  onClick={() => handleLinkClick(post.content)}
                >
                  {post.content}
                </span>
              ) : (
                post.content
              )}
            </div>

            {post.image && (
              <div className="mb-2">
                <img 
                  src={post.image} 
                  alt="Í≤åÏãúÍ∏Ä Ïù¥ÎØ∏ÏßÄ" 
                  className="max-w-full h-auto rounded-lg border max-h-48"
                />
              </div>
            )}

            <div className="flex items-center space-x-6 text-gray-500 text-sm">
              <button className="flex items-center space-x-1 hover:text-blue-600 transition-colors">
                <MessageCircle size={16} />
                <span className="text-xs">{post.comments}</span>
              </button>
              <button className="flex items-center space-x-1 hover:text-green-600 transition-colors">
                <Repeat2 size={16} />
                <span className="text-xs">{post.retweets}</span>
              </button>
              <button className="flex items-center space-x-1 hover:text-red-600 transition-colors">
                <Heart size={16} />
                <span className="text-xs">{post.likes}</span>
              </button>
              <button className="flex items-center space-x-1 hover:text-blue-600 transition-colors">
                <Share size={16} />
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Ìó§Îçî */}
      <header className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50">
        <div className="max-w-6xl mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h1 className="text-lg font-bold text-orange-600">üçä Ï†úÏ£º</h1>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={20} />
                <input
                  type="text"
                  placeholder="Ï†úÏ£º Ï†ïÎ≥¥ Í≤ÄÏÉâ..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-8 pr-3 py-1.5 text-sm border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                />
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              {user ? (
                <div className="flex items-center space-x-4">
                  <button
                    onClick={() => setShowApiModal(true)}
                    className="flex items-center space-x-2 px-3 py-1.5 text-sm text-blue-600 hover:bg-blue-50 rounded-full transition-colors"
                  >
                    <Key size={16} />
                    <span>API</span>
                  </button>
                  <div className="flex items-center space-x-2">
                    <span className="text-lg">{user.avatar}</span>
                    <span className="text-sm font-medium">{user.name}</span>
                  </div>
                  <button
                    onClick={handleLogout}
                    className="flex items-center space-x-2 px-3 py-1.5 text-sm text-red-600 hover:bg-red-50 rounded-full transition-colors"
                  >
                    <LogOut size={16} />
                    <span>Î°úÍ∑∏ÏïÑÏõÉ</span>
                  </button>
                </div>
              ) : (
                <button
                  onClick={() => setShowLoginModal(true)}
                  className="bg-orange-600 text-white text-sm px-4 py-1.5 rounded-full hover:bg-orange-700 transition-colors"
                >
                  Î°úÍ∑∏Ïù∏
                </button>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† */}
      <div className="max-w-4xl mx-auto px-4 py-6">
        {/* Í∞ÄÎ°úÌòï Ïπ¥ÌÖåÍ≥†Î¶¨ */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
          <div className="flex items-center space-x-2 overflow-x-auto scrollbar-hide">
            {categories.map(category => (
              <button
                key={category.id}
                onClick={() => setSelectedCategory(category.id)}
                className={`flex items-center space-x-2 px-3 py-1.5 rounded-full whitespace-nowrap transition-colors flex-shrink-0 text-sm ${
                  selectedCategory === category.id
                    ? 'bg-orange-100 text-orange-600 border-2 border-orange-300'
                    : 'hover:bg-gray-100 border-2 border-transparent'
                }`}
              >
                <span className="text-base">{category.icon}</span>
                <span className="font-medium">{category.name}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Í∏ÄÏì∞Í∏∞ ÏòÅÏó≠ */}
        {user && (
          <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
            <div className="flex space-x-2">
              <div className="text-lg">{user.avatar}</div>
              <div className="flex-1">
                <textarea
                  value={newPost}
                  onChange={(e) => setNewPost(e.target.value)}
                  placeholder="Ï†úÏ£º ÏßÄÏó≠ Ï†ïÎ≥¥Î•º Í≥µÏú†Ìï¥Î≥¥ÏÑ∏Ïöî..."
                  className="w-full p-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-none"
                  rows="3"
                />
                
                {selectedImage && (
                  <div className="mt-3 relative">
                    <img 
                      src={selectedImage} 
                      alt="ÏóÖÎ°úÎìúÎêú Ïù¥ÎØ∏ÏßÄ" 
                      className="max-w-full h-auto rounded-lg border max-h-60"
                    />
                    <button
                      onClick={() => setSelectedImage(null)}
                      className="absolute top-2 right-2 bg-black bg-opacity-50 text-white rounded-full p-1 hover:bg-opacity-70"
                    >
                      <X size={16} />
                    </button>
                  </div>
                )}
                
                <div className="flex items-center justify-between mt-3">
                  <div className="flex items-center space-x-4">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={handleImageUpload}
                      className="hidden"
                      id="image-upload"
                    />
                    <label
                      htmlFor="image-upload"
                      className="flex items-center space-x-1 text-sm text-orange-600 hover:text-orange-700 cursor-pointer"
                    >
                      <Image size={20} />
                      <span>ÏÇ¨ÏßÑ</span>
                    </label>
                    <select
                      value={selectedCategory === 'all' ? 'news' : selectedCategory}
                      onChange={(e) => setSelectedCategory(e.target.value)}
                      className="px-2 py-1 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
                    >
                      {categories.filter(cat => cat.id !== 'all').map(category => (
                        <option key={category.id} value={category.id}>
                          {category.icon} {category.name}
                        </option>
                      ))}
                    </select>
                  </div>
                  <button
                    onClick={handlePost}
                    disabled={!newPost.trim()}
                    className="bg-orange-600 text-white text-sm px-4 py-1.5 rounded-full hover:bg-orange-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    Í≤åÏãúÌïòÍ∏∞
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* ÌîºÎìú */}
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
          {filteredPosts.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              <MapPin size={40} className="mx-auto mb-3 text-gray-300" />
              <p className="text-sm">ÏïÑÏßÅ Í≤åÏãúÍ∏ÄÏù¥ ÏóÜÏäµÎãàÎã§.</p>
              <p className="text-xs mt-1">Ï≤´ Î≤àÏß∏ Ï†úÏ£º Ï†ïÎ≥¥Î•º Í≥µÏú†Ìï¥Î≥¥ÏÑ∏Ïöî!</p>
            </div>
          ) : (
            filteredPosts.map(renderPost)
          )}
        </div>
      </div>

      {/* Î°úÍ∑∏Ïù∏ Î™®Îã¨ */}
      {showLoginModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-lg font-bold">Ï†úÏ£º Î°úÍ∑∏Ïù∏</h2>
              <button
                onClick={() => setShowLoginModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={24} />
              </button>
            </div>
            
            <div className="space-y-4">
              <button
                onClick={() => handleLogin('email')}
                className="w-full flex items-center justify-center space-x-2 px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <span>üìß</span>
                <span>Ïù¥Î©îÏùºÎ°ú Î°úÍ∑∏Ïù∏</span>
              </button>
              
              <button
                onClick={() => handleLogin('google')}
                className="w-full flex items-center justify-center space-x-2 px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <span>üîç</span>
                <span>GoogleÎ°ú Î°úÍ∑∏Ïù∏</span>
              </button>
              
              <button
                onClick={() => handleLogin('naver')}
                className="w-full flex items-center justify-center space-x-2 px-3 py-2 text-sm bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <span>üü¢</span>
                <span>ÎÑ§Ïù¥Î≤ÑÎ°ú Î°úÍ∑∏Ïù∏</span>
              </button>
              
              <button
                onClick={() => handleLogin('kakao')}
                className="w-full flex items-center justify-center space-x-2 px-3 py-2 text-sm bg-yellow-400 text-gray-900 rounded-lg hover:bg-yellow-500 transition-colors"
              >
                <span>üí¨</span>
                <span>Ïπ¥Ïπ¥Ïò§Î°ú Î°úÍ∑∏Ïù∏</span>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* API ÌÇ§ Î™®Îã¨ */}
      {showApiModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-lg font-bold">API ÌÇ§ Í¥ÄÎ¶¨</h2>
              <button
                onClick={() => setShowApiModal(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X size={24} />
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  API ÌÇ§
                </label>
                <div className="flex space-x-2">
                  <input
                    type="text"
                    value={apiKey}
                    readOnly
                    placeholder="API ÌÇ§Î•º ÏÉùÏÑ±ÌïòÏÑ∏Ïöî"
                    className="flex-1 px-2 py-1.5 text-sm border border-gray-300 rounded-lg bg-gray-50"
                  />
                  <button
                    onClick={generateApiKey}
                    className="px-3 py-1.5 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    ÏÉùÏÑ±
                  </button>
                </div>
              </div>
              
              <div className="bg-gray-50 p-3 rounded-lg">
                <h3 className="text-sm font-medium mb-2">API ÏÇ¨Ïö© ÏòàÏãú:</h3>
                <code className="text-xs text-gray-600">
                  GET /api/posts?key={apiKey || 'YOUR_API_KEY'}
                </code>
              </div>
              
              <div className="text-xs text-gray-600">
                <p>Ïù¥ API ÌÇ§Î•º ÏÇ¨Ïö©ÌïòÏó¨ Ï†úÏ£º ÏßÄÏó≠ Ï†ïÎ≥¥ Îç∞Ïù¥ÌÑ∞Ïóê Ï†ëÍ∑ºÌï† Ïàò ÏûàÏäµÎãàÎã§.</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default JejuSNS;